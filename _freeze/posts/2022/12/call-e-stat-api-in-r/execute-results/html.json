{
  "hash": "acf185053458fc1058ce607a0308f0db",
  "result": {
    "markdown": "---\ntitle: \"Rで日本の統計データを効率的に取得しよう（e-Stat APIとjpstatパッケージで）\"\nlang: ja\ndate: \"2022-12-12\"\ncategories: [e-Stat, jpstat, R, Japanese]\nout-width: 100%\nimage: https://github.com/UchidaMizuki/jpstat/blob/main/man/figures/logo.png?raw=true\n---\n\n\n## この記事について\n\nこの記事は「[**R Advent Calendar 2022**](https://qiita.com/advent-calendar/2022/rlang)」の12日目の記事です．\n\n昨年，日本で政府統計の整備が始まってから150年を迎えました（[平成・令和の統計年表](https://www.stat.go.jp/museum/toukei150/img/nenpyo/pdf/nenpyo_heisei_reiwa.pdf)）．最近では，[政府統計の総合窓口（e-Stat）](https://www.e-stat.go.jp)で，様々な政府統計データを閲覧・ダウンロードすることができるようになりました．\n\ne-Statには，便利な[API機能](https://www.e-stat.go.jp/api/)も提供されています（利用ガイドは[こちら](https://www.e-stat.go.jp/api/api-info/api-guide)．あらかじめ[利用規約](https://www.e-stat.go.jp/api/agreement/)を確認してください．API機能を利用する際は，事前に[ユーザ登録](https://www.e-stat.go.jp/mypage/user/preregister)を行ってください）．\n\nこの記事では，Rの[**jpstat**](https://uchidamizuki.github.io/jpstat/)**パッケージを使って，e-Stat APIを効率的に用いる**方法を紹介します．\n\n## e-Statについて\n\ne-Statには，様々な政府統計のデータベースが整理されていますが，ここでは，2015年国民健康・栄養調査の調査結果から[**睡眠時間に関するデータベース**](https://www.e-stat.go.jp/dbview?sid=0003224282)を見てみましょう．\n\nデータベースを開くと以下のように統計表が表示され，右上の「**ダウンロード**」ボタンからデータをダウンロードすることができます．\n\n![e-Statデータベース：統計表表示画面](images/estat_1.png){width=\"75%\"}\n\n画面左上の「**表示項目選択**」ボタンをクリックすると，表示するデータの項目（年齢階級・性別など）を選択することができます．\n\n![e-Statデータベース：表示項目選択画面](images/estat_2.png){width=\"75%\"}\n\nたとえば，年齢階級を選択したい場合は，年齢階級の「**項目を選択**」ボタンをクリックすると以下のような画面で年齢階級を選択することができます．\n\n![e-Statデータベース：表示項目の設定画面](images/estat_3.png){width=\"75%\"}\n\n表示項目を選択した後に，「**ダウンロード**」ボタンをクリックすると，選択した項目のデータのみをダウンロードすることができます．\n\nこのように，e-Statでは，簡単にデータを抽出・ダウンロードすることができます．しかし，**データ取得作業の再現性**を高めたり，**プログラムを用いたデータ抽出・取得の効率化**を行ったりしたい場合は，**e-Stat API**を用いるのがおすすめです．\n\n## jpstatパッケージでe-Stat APIを使う\n\n上で説明したe-Statでのデータの抽出・ダウンロードをe-Stat APIで行うためには，以下のようなステップを踏む必要があります．\n\n1.  [**メタ情報取得**](https://www.e-stat.go.jp/api/api-info/e-stat-manual3-0#api_2_2)・パラメータ設定：表示項目データを取得・選択，選択項目に対応する[APIパラメータ](https://www.e-stat.go.jp/api/api-info/e-stat-manual3-0#api_3_4)を設定\n2.  [**統計データ取得**](https://www.e-stat.go.jp/api/api-info/e-stat-manual3-0#api_2_3)：選択したデータを取得・表データに整形する\n\n[jpstat](https://uchidamizuki.github.io/jpstat/)パッケージは，これらの一連の作業をR上で効率的に行うため開発されたものです[^1]．jpstatパッケージは，CRANからインストールすることができます．\n\n[^1]: e-Stat APIでは，メタ情報取得・統計データ取得以外にも，様々な機能が提供されています（[API仕様](https://www.e-stat.go.jp/api/api-info/e-stat-manual3-0)）．\n\nここでは，**男女・年齢階級別の睡眠時間をグラフ化**することを目標として，さきほど取り上げた[睡眠時間に関するデータベース](https://www.e-stat.go.jp/dbview?sid=0003224282)（2015年）からデータを取得してみましょう．まず，必要なパッケージを読み込みます．\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"jpstat\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(jpstat)\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n### ステップ1：メタ情報（表示項目）を表示・抽出する\n\ne-Stat APIを用いるためには，事前に[**ユーザ登録**](https://www.e-stat.go.jp/mypage/user/preregister)を行い，**`appId` と呼ばれるアプリケーションIDを取得**する必要があります[^2]．\n\n[^2]: アプリケーションIDの取得には，URLを登録する必要があります．公開サイトで利用しない場合には，`http://test.localhost/`などのローカルアドレスを入力することが推奨されています（詳しくは[利用ガイド](https://www.e-stat.go.jp/api/api-info/api-guide)を参照）．\n\n`estat()` 関数に，`appId` とデータベースのURL（または統計表ID：`statsDataId`）を入力することでメタ情報（表示項目）を取得することができます[^3]．\n\n[^3]: e-Statのページの右上の「**API**」ボタンを押すとAPIのクエリが表示されます．クエリ内の`statsDataId` を直接入力することでメタ情報を取得することもできます．\n\nはじめに，メタ情報のうち「年齢階級（`cat01`）」のデータを見てみましょう（`cat01`はAPI上での分類名です）．`activate()` 関数によりメタ情報を表示することができます．さらに，`filter()` 関数により項目を選択することができます．ここでは，年齢階級別データのみが必要であるため，「総数」データを削除します[^4]．\n\n[^4]: ただし，各パラメータの項目数には，100件という上限が設定されているため，フィルタリング後の項目数が多くなる場合には，フィルタリングを行わず，全ての項目を選択することをおすすめします．\n\nパイプ演算子`|>` を使うことで，以下のように，`cat01`以外のメタ情報のデータ抽出を続けて行うことができます．ここでは，**男女・年齢階級・睡眠時間別の回答者数**データを抽出しています．\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# ご自身のappIdに置き換えてください\nappId <- \"Your appId\"\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nestat_sleeptime_2015 <- estat(appId, \"https://www.e-stat.go.jp/dbview?sid=0003224282\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# メタ情報の閲覧・選択\nestat_sleeptime_2015 |> \n  activate(cat01) |> \n  filter(name != \"総数\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# ☐ tab:   表章項目     [2] <code, name, level, unit>\n# ☒ cat01: 年齢階級     [6] <code, name, level, parentCode>\n# ☐ cat02: 睡眠の質     [8] <code, name, level, parentCode>\n# ☐ cat03: 性別         [3] <code, name, level, parentCode>\n# ☐ cat04: 平均睡眠時間 [6] <code, name, level, parentCode>\n# ☐ time:  時間軸(年次) [1] <code, name, level>\n# \n# A tibble: 6 × 4\n  code  name      level parentCode\n  <chr> <chr>     <chr> <chr>     \n1 160   20歳-29歳 2     100       \n2 170   30歳-39歳 2     100       \n3 180   40歳-49歳 2     100       \n4 190   50歳-59歳 2     100       \n5 210   60歳-69歳 2     100       \n6 220   70歳以上  2     100       \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nestat_sleeptime_2015_filtered <- estat_sleeptime_2015 |> \n  \n  # 表章項目\n  activate(tab) |> \n  filter(name == \"人数\") |> \n  \n  # 年齢階級\n  activate(cat01) |> \n  filter(name != \"総数\") |> \n  \n  # 睡眠の質\n  activate(cat02) |> \n  filter(name == \"総数\") |> \n  \n  # 性別\n  activate(cat03) |> \n  filter(name %in% c(\"男性\", \"女性\"))\n```\n:::\n\n\n### ステップ2：統計データを取得（ダウンロード）する\n\nデータの抽出後に`collect()` を適用することで統計データを取得することができます．また，`collect()`の`n`引数で，取得するデータの列を名付けることができます．ここでは，`\"person\"`と名付けます．\n\n取得したデータ`data_sleeptime_2015`を見ると，（たくさんの列が存在する）分析しづらいデータになっていることがわかります．**ステップα**で，データ取得とデータ整形を同時に行う方法について説明します．\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_sleeptime_2015 <- estat_sleeptime_2015_filtered |> \n  \n  # データ取得・数値に変換\n  collect(n = \"person\") |> \n  mutate(person = parse_number(person))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe total number of data is 72.\n```\n:::\n\n```{.r .cell-code}\nknitr::kable(head(data_sleeptime_2015, 10))\n```\n\n::: {.cell-output-display}\n|tab_code |tab_name |tab_level |tab_unit |cat01_code |cat01_name |cat01_level |cat01_parentCode |cat02_code |cat02_name |cat02_level |cat02_parentCode |cat03_code |cat03_name |cat03_level |cat03_parentCode |cat04_code |cat04_name           |cat04_level |cat04_parentCode |time_code  |time_name |time_level | person|\n|:--------|:--------|:---------|:--------|:----------|:----------|:-----------|:----------------|:----------|:----------|:-----------|:----------------|:----------|:----------|:-----------|:----------------|:----------|:--------------------|:-----------|:----------------|:----------|:---------|:----------|------:|\n|100      |人数     |          |人       |160        |20歳-29歳  |2           |100              |100        |総数       |1           |NA               |110        |男性       |2           |100              |110        |５時間未満           |2           |100              |2015000000 |2015年    |1          |     23|\n|100      |人数     |          |人       |160        |20歳-29歳  |2           |100              |100        |総数       |1           |NA               |110        |男性       |2           |100              |120        |５時間以上６時間未満 |2           |100              |2015000000 |2015年    |1          |     86|\n|100      |人数     |          |人       |160        |20歳-29歳  |2           |100              |100        |総数       |1           |NA               |110        |男性       |2           |100              |130        |６時間以上７時間未満 |2           |100              |2015000000 |2015年    |1          |     88|\n|100      |人数     |          |人       |160        |20歳-29歳  |2           |100              |100        |総数       |1           |NA               |110        |男性       |2           |100              |140        |７時間以上８時間未満 |2           |100              |2015000000 |2015年    |1          |     37|\n|100      |人数     |          |人       |160        |20歳-29歳  |2           |100              |100        |総数       |1           |NA               |110        |男性       |2           |100              |150        |８時間以上９時間未満 |2           |100              |2015000000 |2015年    |1          |     19|\n|100      |人数     |          |人       |160        |20歳-29歳  |2           |100              |100        |総数       |1           |NA               |110        |男性       |2           |100              |160        |９時間以上           |2           |100              |2015000000 |2015年    |1          |      3|\n|100      |人数     |          |人       |160        |20歳-29歳  |2           |100              |100        |総数       |1           |NA               |120        |女性       |2           |100              |110        |５時間未満           |2           |100              |2015000000 |2015年    |1          |     28|\n|100      |人数     |          |人       |160        |20歳-29歳  |2           |100              |100        |総数       |1           |NA               |120        |女性       |2           |100              |120        |５時間以上６時間未満 |2           |100              |2015000000 |2015年    |1          |    106|\n|100      |人数     |          |人       |160        |20歳-29歳  |2           |100              |100        |総数       |1           |NA               |120        |女性       |2           |100              |130        |６時間以上７時間未満 |2           |100              |2015000000 |2015年    |1          |     94|\n|100      |人数     |          |人       |160        |20歳-29歳  |2           |100              |100        |総数       |1           |NA               |120        |女性       |2           |100              |140        |７時間以上８時間未満 |2           |100              |2015000000 |2015年    |1          |     55|\n:::\n:::\n\n\n### ステップα：データ取得とデータ整形を同時に行う\n\njpstatでe-Statのデータを取得すると，パラメータ名（`cat01`など）と各項目の列名（`code`， `name`など）から列（`cat01_code`，`cat01_name`など）が作成されます．\n\njpstatでは，`rekey()` 関数によりパラメータ名を変更したり，`select()` 関数で項目別に列を選択したりすることでデータを整理することができます[^5]．以下のように書くことで，すっきりとしたデータを作成することができます．\n\n[^5]: `select()` 関数である項目の列を全て削除することもできます．これは，「総数」のみを選択する場合など，分析に不要な項目を削除する場合に便利です．\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_sleeptime_2015 <- estat_sleeptime_2015 |> \n  activate(tab) |> \n  filter(name == \"人数\") |> \n  select() |> \n  \n  activate(cat01) |> \n  rekey(\"ageclass\") |> \n  filter(name != \"総数\") |> \n  select(name) |> \n  \n  activate(cat02) |> \n  filter(name == \"総数\") |> \n  select() |> \n  \n  activate(cat03) |> \n  rekey(\"sex\") |> \n  filter(name %in% c(\"男性\", \"女性\")) |> \n  select(name) |> \n  \n  activate(cat04) |> \n  rekey(\"sleeptime\") |> \n  select(name) |> \n  \n  activate(time) |> \n  select() |> \n  \n  collect(n = \"person\") |> \n  mutate(person = parse_number(person))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe total number of data is 72.\n```\n:::\n\n```{.r .cell-code}\nknitr::kable(head(data_sleeptime_2015, 10))\n```\n\n::: {.cell-output-display}\n|ageclass_name |sex_name |sleeptime_name       | person|\n|:-------------|:--------|:--------------------|------:|\n|20歳-29歳     |男性     |５時間未満           |     23|\n|20歳-29歳     |男性     |５時間以上６時間未満 |     86|\n|20歳-29歳     |男性     |６時間以上７時間未満 |     88|\n|20歳-29歳     |男性     |７時間以上８時間未満 |     37|\n|20歳-29歳     |男性     |８時間以上９時間未満 |     19|\n|20歳-29歳     |男性     |９時間以上           |      3|\n|20歳-29歳     |女性     |５時間未満           |     28|\n|20歳-29歳     |女性     |５時間以上６時間未満 |    106|\n|20歳-29歳     |女性     |６時間以上７時間未満 |     94|\n|20歳-29歳     |女性     |７時間以上８時間未満 |     55|\n:::\n:::\n\n\n### おまけ：取得したデータのグラフ化\n\n最後に，取得した**2015年の男女・年齢階級別の睡眠時間**データをグラフ化してみましょう．グラフより，男性と女性では年齢階級別の睡眠時間の傾向が異なることがわかります．\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_sleeptime_2015 |> \n  mutate(ageclass_name = as_factor(ageclass_name),\n         sex_name = as_factor(sex_name),\n         sleeptime_name = as_factor(sleeptime_name)) |> \n  group_by(ageclass_name, sex_name) |> \n  mutate(prop = person / sum(person)) |> \n  ungroup() |> \n  ggplot(aes(ageclass_name, prop,\n             fill = fct_rev(sleeptime_name))) +\n  geom_col() +\n  geom_text(aes(label = if_else(prop > 0.05,\n                                scales::label_percent(accuracy = 1)(prop),\n                                \"\")),\n            position = position_stack(vjust = 0.5)) +\n  scale_x_discrete(\"年齢階級\") +\n  scale_y_continuous(\"割合\", \n                     labels = scales::label_percent(accuracy = 1)) +\n  scale_fill_brewer(\"睡眠時間\",\n                    palette = \"Spectral\") +\n  facet_wrap(~ sex_name) +\n  guides(x = guide_axis(n.dodge = 2))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n```\n:::\n\n::: {.cell-output-display}\n![](call-e-stat-api-in-r_files/figure-html/unnamed-chunk-10-1.png){width=768}\n:::\n:::\n\n\n## まとめ\n\n本記事では，e-Stat APIと[jpstat](https://uchidamizuki.github.io/jpstat/)パッケージで日本の統計データを効率的に取得する方法について紹介しました．\n\nRで統計データを取得することで，作業の再現性や効率性を高めることができます．また，jpstatパッケージを使うことで，データ取得とデータ整形を同時に行うことができるため便利です．みなさんもぜひ使ってみてください．\n",
    "supporting": [
      "call-e-stat-api-in-r_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}