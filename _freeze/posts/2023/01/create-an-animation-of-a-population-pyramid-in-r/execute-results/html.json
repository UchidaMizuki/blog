{
  "hash": "dbc496e090e88a196ff5f4010cf2cf0a",
  "result": {
    "markdown": "---\ntitle: \"Rで人口ピラミッドのアニメーションを作る\"\nlang: ja\ndate: \"2023-01-01\"\ncategories: [ggplot2, gganimate, e-Stat, jpstat, R, Japanese]\nout-width: 100%\nimage: poppyramid.gif\n---\n\n\n## この記事について\n\n国立社会保障・人口問題研究所（社人研）の公開している[人口ピラミッドの推移アニメーション](https://www.ipss.go.jp/site-ad/TopPageData/Pyramid_a.html)を参考に，以下のようなアニメーションをRのggplot2で作成してみました．\n\n![](poppyramid.gif)\n\n## 国勢調査の時系列データの取得\n\nまず，e-Statで公開されている[国勢調査の男女・5最階級別人口の時系列データ](https://www.e-stat.go.jp/dbview?sid=0003410380)をRのjpstatパッケージを用いて取得します．\n\njpstatパッケージからe-Stat APIを用いるためには，アプリケーションID（`appId`）を取得する必要があります．\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(jpstat)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# ご自身のappIdに置き換えてください\nSys.setenv(ESTAT_API_KEY = \"Your appId\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncensus <- estat(statsDataId = \"https://www.e-stat.go.jp/dbview?sid=0003410380\")\n\npop <- census |> \n  activate(tab) |> \n  filter(name == \"人口\") |> \n  select() |> \n  \n  # 性別の抽出\n  activate(cat01) |> \n  rekey(\"sex\") |> \n  filter(name %in% c(\"男\", \"女\")) |> \n  select(name) |> \n  \n  # 年齢階級の抽出\n  activate(cat02) |> \n  rekey(\"ageclass\") |> \n  filter(str_detect(name, \"^\\\\d+～\\\\d+歳$\") |\n           name == \"85歳以上\" |\n           name == \"110歳以上\") |> \n  select(name) |> \n  \n  # 年の抽出\n  activate(time) |> \n  rekey(\"year\") |> \n  filter(str_detect(name, \"^\\\\d+年$\")) |> \n  select(name) |> \n  \n  # e-Statデータの取得\n  collect(n = \"pop\") |> \n  \n  rename_with(~ .x |> \n                str_remove(\"_name$\")) |> \n  mutate(sex = as_factor(sex),\n         year = parse_number(year),\n         \n         # 各年齢階級の最低年齢を取得\n         age_from = ageclass |> \n           str_extract(\"^\\\\d+\") |> \n           stringi::stri_trans_nfkc() |> \n           as.integer(),\n         \n         # 最高の年齢階級を「85歳以上」とする\n         ageclass = case_when(age_from >= 85 ~ \"85歳以上\",\n                              TRUE ~ ageclass) |> \n           as_factor(),\n         \n         # 年齢層を追加\n         agegroup = case_when(between(age_from, 0, 10) ~ \"年少人口\",\n                              between(age_from, 15, 60) ~ \"生産年齢人口\",\n                              between(age_from, 65, 70) ~ \"前期老年人口\",\n                              age_from >= 75 ~ \"後期老年人口\") |> \n           as_factor(),\n         pop = parse_number(pop)) |> \n  \n  # 「85歳以上」人口を集計\n  group_by(year, sex, ageclass, agegroup) |> \n  summarise(pop = sum(pop),\n            .groups = \"drop\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe total number of data is 796.\n```\n:::\n\n```{.r .cell-code}\nknitr::kable(head(pop))\n```\n\n::: {.cell-output-display}\n| year|sex |ageclass |agegroup     |     pop|\n|----:|:---|:--------|:------------|-------:|\n| 1920|男  |０～４歳 |年少人口     | 3752627|\n| 1920|男  |５～９歳 |年少人口     | 3467156|\n| 1920|男  |10～14歳 |年少人口     | 3089225|\n| 1920|男  |15～19歳 |生産年齢人口 | 2749022|\n| 1920|男  |20～24歳 |生産年齢人口 | 2316479|\n| 1920|男  |25～29歳 |生産年齢人口 | 2008005|\n:::\n:::\n\n\n## 人口ピラミッドアニメーションの作成\n\nRのgganimateパッケージを用いることでggplot2のグラフをアニメーションにすることができます．\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(gganimate)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'gganimate' was built under R version 4.3.1\n```\n:::\n\n```{.r .cell-code}\n# 年齢層を表示するためのデータ\nagegroup <- pop |> \n  group_by(sex, agegroup) |>\n  summarise(ageclass = mean(as.integer(ageclass)),\n            .groups = \"drop\") |> \n  mutate(hjust = case_when(sex == \"男\" ~ 1.25,\n                           sex == \"女\" ~ -0.25))\n\npoppyramid <- pop |> \n  \n  # 人口ピラミッドを作成するため男性人口をマイナスに変換\n  mutate(pop = if_else(sex == \"男\", -pop, pop)) |> \n  \n  ggplot(aes(ageclass, pop,\n             group = sex,\n             fill = agegroup)) +\n  geom_col(show.legend = FALSE) +\n  geom_text(data = agegroup,\n            aes(label = agegroup,\n                hjust = hjust),\n            y = 0) +\n  scale_x_discrete(NULL) +\n  scale_y_continuous(\"人口［千人］\",\n                     \n                     # ラベルを絶対値・千人単位に変換\n                     labels = purrr::compose(scales::label_comma(scale = 1e-3), abs)) +\n  scale_fill_brewer(palette = \"Set2\") +\n  coord_flip() +\n  facet_wrap(~ sex,\n             scales = \"free_x\") +\n  labs(title = \"{frame_time %/% 5 * 5}年\") +\n  theme(plot.title = element_text(hjust = 0.5)) +\n  \n  # アニメーションに変換\n  transition_time(year)\n\n# 幅・高さを変更\nanimate(poppyramid, \n        width = 800,\n        height = 600,\n        res = 150,\n        renderer = gifski_renderer())\n```\n\n::: {.cell-output-display}\n![](create-an-animation-of-a-population-pyramid-in-r_files/figure-html/create-gif-1.gif)\n:::\n:::\n\n::: {.cell}\n\n:::\n",
    "supporting": [
      "create-an-animation-of-a-population-pyramid-in-r_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}