{
  "hash": "608fdee417c01290b5bcd841d3657780",
  "result": {
    "markdown": "---\ntitle: \"RでAICの雰囲気をつかむ\"\nlang: ja\ncategories: [AIC, R, Japanese]\ndate: \"2023-09-03\"\ndraft: true\nslide-format: revealjs\n---\n\n```{=html}\n<iframe src=\"https://uchidamizuki.github.io/slide-estat-with-r/\" width = \"800\" height = \"500\"></iframe>\n```\n\n\n## [e-Stat](https://www.e-stat.go.jp)とは❓\n\n-   日本の政府統計ポータルサイト\n-   多くの統計データを検索・閲覧・取得可能👍\n\n![画像出典：e-Stat](https://www.e-stat.go.jp/sites/default/files/inline-images/e-stat_001_1.png){fig-align=\"center\"}\n\n## e-Statの使い方📌\n\n### 1. データベースを検索🔎\n\n![画像出典：e-Stat](https://www.e-stat.go.jp/sites/default/files/inline-images/e-stat_003.png){fig-align=\"center\"}\n\n## e-Statの使い方📌\n\n### 2. データベースを選択👆{auto-animate=\"true\"}\n\n![画像出典：e-Stat](https://www.e-stat.go.jp/sites/default/files/inline-images/e-stat_039.png){fig-align=\"center\"}\n\n## e-Statの使い方📌\n\n### 2. データベースを選択👆\n\n![画像出典：e-Stat](https://www.e-stat.go.jp/sites/default/files/inline-images/image200_20.png){fig-align=\"center\"}\n\n## e-Statの使い方📌\n\n### 3. データ項目を選択✅\n\n![画像出典：e-Stat](https://www.e-stat.go.jp/sites/default/files/inline-images/e-stat_040.png){fig-align=\"center\"}\n\n## e-Statの使い方📌\n\n### 4. データをダウンロード💾\n\n![画像出典：e-Stat](https://www.e-stat.go.jp/sites/default/files/inline-images/dbview01_1.png){fig-align=\"center\"}\n\n## e-Stat🤝R {auto-animate=\"true\"}\n\n### Rでもe-Statの機能を利用したい❗\n\n::: {.fragment .fade-in}\n::: {style=\"text-align: center;\"}\n⏬\n:::\n\n### [e-Stat API](https://www.e-stat.go.jp/api/)\n\nRでもe-Statの機能を利用できる⏩[estatapi](https://yutannihilation.github.io/estatapi/)📦も\n\n1.  データベースを検索🔎\n2.  データベースを選択👆\n3.  データ項目を選択✅\n4.  データをダウンロード💾\n:::\n\n## e-Stat🤝R {auto-animate=\"true\"}\n\n### [e-Stat API](https://www.e-stat.go.jp/api/)\n\nただしWeb版と比べてStep 3～が煩雑になりがち😖\n\n3.  データ項目を選択✅\n4.  データをダウンロード💾\n\n::: {.fragment .fade-in}\n::: {style=\"text-align: center;\"}\n⏬\n:::\n\n### [jpstat](https://uchidamizuki.github.io/jpstat/)📦\n\n-   効率的な統計データ抽出・取得・整形に特化👍\n-   dplyr📦とパイプ（`|>, %>%`）を利用可能👍\n:::\n\n## jpstat📦の使い方📌\n\n### 1. アプリケーションIDを設定\n\n-   e-Stat APIの利用には[ユーザ登録](https://www.e-stat.go.jp/mypage/user/preregister)が必要\n-   [利用ガイド](https://www.e-stat.go.jp/api/api-info/api-guide)に従ってアプリケーションIDを取得\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'ggplot2' was built under R version 4.3.1\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'purrr' was built under R version 4.3.1\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.3     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code}\nlibrary(jpstat)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n「このサービスは、政府統計総合窓口(e-Stat)のAPI機能を使用していますが、サービスの内容は国によって保証されたものではありません。」\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"8-9\"}\n# パッケージのインストール（必要なら）・読み込み\nif (!require(\"tidyverse\")) install.packages(\"tidyverse\")\nif (!require(\"jpstat\")) install.packages(\"jpstat\")\n\nlibrary(tidyverse)\nlibrary(jpstat)\n\n# グローバル変数にアプリケーションIDを追加\nSys.setenv(ESTAT_API_KEY = \"あなたのアプリケーションID\")\n```\n:::\n\n\n::: aside\n事前に[利用規約](https://www.e-stat.go.jp/api/api-info/api-guide)をご確認ください\n:::\n\n## jpstat📦の使い方📌 {auto-animate=\"true\"}\n\n### 2. データ項目を取得[^1]\n\n[^1]: 正式にはメタ情報と呼ばれています．\n\n[2023年家計調査](https://www.e-stat.go.jp/dbview?sid=0003343671)データベースを対象[^2]\n\n[^2]: [estatapi](https://yutannihilation.github.io/estatapi/)📦のREADMEを参考にしました．\n\n\n::: {.cell}\n\n```{.r .cell-code}\nestat(statsDataId = \"0003343671\") # statsDataId: URL等に記載されている統計表ID\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# ☐ tab:   表章項目               [1] <code, name, level>\n# ☐ cat01: 品目分類（2020年改定） [690] <code, name, level, unit, parentCode>\n# ☐ cat02: 世帯区分               [4] <code, name, level>\n# ☐ area:  地域区分               [53] <code, name, level>\n# ☐ time:  時間軸（月次）         [462] <code, name, level>\n# \n# Please `activate()`.\n```\n:::\n:::\n\n\n## jpstat📦の使い方📌 {auto-animate=\"true\"}\n\n### 3. データ項目を抽出\n\n`activate(), filter()`でチョコレート関連品目を抽出\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"2-3\"}\nestat(statsDataId = \"0003343671\") |> \n  activate(cat01) |> \n  filter(str_detect(name, \"チョコレート\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# ☐ tab:   表章項目               [1] <code, name, level>\n# ☒ cat01: 品目分類（2020年改定） [2] <code, name, level, unit, parentCode>\n# ☐ cat02: 世帯区分               [4] <code, name, level>\n# ☐ area:  地域区分               [53] <code, name, level>\n# ☐ time:  時間軸（月次）         [462] <code, name, level>\n# \n# A tibble: 2 × 5\n  code      name                 level unit  parentCode\n  <chr>     <chr>                <chr> <chr> <chr>     \n1 010800130 352 チョコレート     5     円    010800000 \n2 010800140 353 チョコレート菓子 5     円    010800000 \n```\n:::\n:::\n\n\n## jpstat📦の使い方📌 {auto-animate=\"true\"}\n\n### 3. データ項目を抽出\n\n他の抽出処理をパイプ（`|>, %>%`）でつなげられる\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"5-9\"}\nestat(statsDataId = \"0003343671\") |> \n  activate(cat01) |> \n  filter(str_detect(name, \"チョコレート\")) |> \n  \n  activate(area) |> \n  filter(name == \"全国\") |> \n  \n  activate(time) |> \n  filter(str_detect(name, \"2023年[1-3]月\"))\n```\n:::\n\n\n## jpstat📦の使い方📌 {auto-animate=\"true\"}\n\n### 4. データをダウンロード\n\n`collect()`で統計データをダウンロード\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"1,11\"}\nchocolate <- estat(statsDataId = \"0003343671\") |> \n  activate(cat01) |> \n  filter(str_detect(name, \"チョコレート\")) |> \n  \n  activate(area) |> \n  filter(name == \"全国\") |> \n  \n  activate(time) |> \n  filter(str_detect(name, \"2023年[1-3]月\")) |> \n  \n  collect(n = \"金額\") # `n`で収集データの列名を指定\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe total number of data is 12.\n```\n:::\n:::\n\n\n## jpstat📦の使い方📌 {auto-animate=\"true\"}\n\n### 4. データをダウンロード\n\n列名が難解で列数が多い😖⏩データ整形したい❗\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(chocolate)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 18\n  tab_code tab_name tab_level cat01_code cat01_name       cat01_level cat01_unit\n  <chr>    <chr>    <chr>     <chr>      <chr>            <chr>       <chr>     \n1 01       金額     \"\"        010800130  352 チョコレート 5           円        \n2 01       金額     \"\"        010800130  352 チョコレート 5           円        \n3 01       金額     \"\"        010800130  352 チョコレート 5           円        \n4 01       金額     \"\"        010800130  352 チョコレート 5           円        \n5 01       金額     \"\"        010800130  352 チョコレート 5           円        \n6 01       金額     \"\"        010800130  352 チョコレート 5           円        \n# ℹ 11 more variables: cat01_parentCode <chr>, cat02_code <chr>,\n#   cat02_name <chr>, cat02_level <chr>, area_code <chr>, area_name <chr>,\n#   area_level <chr>, time_code <chr>, time_name <chr>, time_level <chr>,\n#   金額 <chr>\n```\n:::\n:::\n\n\n## jpstat📦の使い方📌 {auto-animate=\"true\"}\n\n### 5. データを整形\n\n`rekey(), select()`で収集データの列を指定できる\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"2,4,7,9,12\"}\nchocolate <- estat(statsDataId = \"0003343671\") |> \n  activate(tab) |> select() |> # 何も`select()`しない場合は列が消える\n    \n  activate(cat01) |> rekey(\"品目分類\") |> select(name) |> \n  filter(str_detect(name, \"チョコレート\")) |> \n  \n  activate(cat02) |> rekey(\"世帯区分\") |> select(name) |>\n  \n  activate(area) |> rekey(\"地域区分\") |> select(name) |>\n  filter(name == \"全国\") |> \n  \n  activate(time) |> rekey(\"月次\") |> select(name) |>\n  filter(str_detect(name, \"2023年[1-3]月\")) |> \n  \n  collect(n = \"金額\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe total number of data is 12.\n```\n:::\n:::\n\n\n## jpstat📦の使い方📌 {auto-animate=\"true\"}\n\n### 5. データを整形\n\n列名がわかりやすくなり不要な列が消えた👍\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(chocolate)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 5\n  品目分類_name    世帯区分_name                   地域区分_name 月次_name 金額 \n  <chr>            <chr>                           <chr>         <chr>     <chr>\n1 352 チョコレート 二人以上の世帯（2000年～）      全国          2023年1月 869  \n2 352 チョコレート 二人以上の世帯（2000年～）      全国          2023年2月 1307 \n3 352 チョコレート 二人以上の世帯（2000年～）      全国          2023年3月 656  \n4 352 チョコレート 二人以上の世帯のうち勤労者世帯… 全国          2023年1月 998  \n5 352 チョコレート 二人以上の世帯のうち勤労者世帯… 全国          2023年2月 1491 \n6 352 チョコレート 二人以上の世帯のうち勤労者世帯… 全国          2023年3月 749  \n```\n:::\n:::\n\n\n## まとめ📋\n\n-   [jpstat](https://github.com/UchidaMizuki/jpstat)📦で統計データ収集が楽しく簡単に\n\n::: {.fragment .fade-in}\n-   e-Stat以外の統計APIにも対応するかも\n    -   現在，実験的にRESAS APIなどに対応\n-   要望やバグ報告は[UchidaMizuki/jpstat/issues](https://github.com/UchidaMizuki/jpstat/issues)まで\n:::\n\n## Enjoy🍫\n\n余談：2月はチョコレート消費が増えることがわかった！\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nchocolate |> \n  mutate(世帯区分_name = 世帯区分_name |> \n           str_remove(\"（2000年～）$\") |> \n           as_factor(),\n         金額 = parse_number(金額)) |> \n  ggplot(aes(月次_name, 金額,\n             fill = 世帯区分_name)) +\n  geom_col(position = \"dodge\") +\n  scale_x_discrete(NULL) +\n  scale_y_continuous(\"1世帯あたり金額［円］\",\n                     labels = scales::label_comma()) +\n  scale_fill_brewer(\"世帯区分\",\n                    palette = \"Paired\") +\n  facet_wrap(~ 品目分類_name)\n```\n\n::: {.cell-output-display}\n![](get-a-feel-for-aic-with-r_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::",
    "supporting": [
      "get-a-feel-for-aic-with-r_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}