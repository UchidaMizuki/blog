{
  "hash": "ce052d78ed1b98c363e1c93f5235a5bb",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"LiNGAM\"\nlang: ja\ncategories: [R, Japanese]\ndraft: true\nformat:\n  html:\n    mermaid:\n      theme: default\n    df-print: paged\n---\n\n```{mermaid}\n%%| file: lingam/lingam_nonlinear_prod.mmd\nflowchart LR\n  x11-->x21\n  x12-->x21\n  x22-->x31\n  x21-->x31\n```\n\n```{mermaid}\n%%| file: lingam/lingam_nonlinear_power.mmd\nflowchart LR\n  x11-->x21\n  x12-->x11\n  x12-->x21\n  x21-->x22\n  x31-->x22\n```\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.0     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n:::\n\n```{mermaid}\nflowchart LR\n  x11 --> add1(+)\n  x12 --> add1\n  add1 --> x21\n  x21 --> fun2(fun)\n  x22 --> fun2\n  fun2 --> x31\n```\n\n::: {.cell}\n\n```{.python .cell-code}\nimport numpy as np\nimport pandas as pd\nimport lingam\n\nrng = np.random.default_rng(12345)\n\nn = 1000\ndata = pd.DataFrame({\n  'x11': 1 + rng.random(n),\n  'x12': 2 + rng.random(n),\n  'x22': 3 + rng.random(n)\n})\n\ndata_linear = data\\\n  .assign(\n    x21=lambda df: df.x11 + df.x12 + rng.random(n),\n    x31=lambda df: df.x21 + df.x22 + rng.random(n),\n  )\ndata_nonlinear_prod = data\\\n .assign(\n    x21=lambda df: df.x11 + df.x12 + rng.random(n),\n    x31=lambda df: df.x21 * df.x22 + rng.random(n),\n  )\ndata_nonlinear_power = data\\\n .assign(\n    x21=lambda df: df.x11 + df.x12 + rng.random(n),\n    x31=lambda df: df.x21 ** df.x22 + rng.random(n),\n  )\n\ndef discover_causality(data):\n  model = lingam.DirectLiNGAM()\n  model.fit(data)\n\n  return pd.DataFrame(\n    model.adjacency_matrix_,\n    columns=data.columns,\n    index=data.columns\n  )\\\n  .reset_index(names = 'node_to')\\\n  .melt(\n    id_vars='node_to',\n    var_name='node_from'\n  )\\\n  .pipe(lambda df: df[np.logical_not(np.isclose(df.value, 0, rtol=0, atol=1e-3))])\\\n  .reindex(columns=['node_from', 'node_to', 'value'])\n\ndef write_mermaid(df, file):\n  with open(file, 'w') as f:\n    f.write('flowchart LR\\n')\n    for row in df.itertuples():\n      f.write('  {}-->{}\\n'.format(row.node_from, row.node_to))\n\ndiscover_causality(data_linear)\\\n  .pipe(lambda df: write_mermaid(df, 'lingam/lingam_linear.mmd'))\ndiscover_causality(data_nonlinear_prod)\\\n  .pipe(lambda df: write_mermaid(df, 'lingam/lingam_nonlinear_prod.mmd'))\ndiscover_causality(data_nonlinear_power)\\\n  .pipe(lambda df: write_mermaid(df, 'lingam/lingam_nonlinear_power.mmd'))\n# discover_causality(data_nonlinear_prod)\n# discover_causality(data_nonlinear_power)\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}