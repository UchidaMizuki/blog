{
  "hash": "d35ab38d80cf4cf464e5262cbfdfd9a3",
  "result": {
    "engine": "julia",
    "markdown": "---\ntitle: \"Julia JuMPで効用最大化問題を解いてみた（簡易的な事例紹介）\"\nengine: julia\ndraft: true\n---\n\n\n\nこの記事では，数理最適化ライブラリであるJulia JuMPを用いて， 経済学でよく用いられるコブ・ダグラス型効用関数を用いた効用最大化問題を 解いてみます．\n\nコブ・ダグラス型効用関数の効用最大化は解析的に解くことができるため， 必ずしもJulia JuMPを使って解く必要はありませんが， ここでは，Julia JuMPの使い方を学ぶために，あえて解析的な解と数値的な解を 比較してみました．\n\n## コブ・ダグラス型効用関数\n\nコブ・ダグラス型効用関数は以下のように定義されます． ここで，$x_i$は生産要素$i$の消費量， $\\alpha_i$は生産要素$i$の弾力性パラメータです．\n\n$$\nU = \\prod_{i=1}^{n} x_i^{\\alpha_i}\n$$\n\nこの効用関数をJuliaで実装すると以下のようになります．\n\n\n\n::: {#2 .cell execution_count=1}\n``` {.julia .cell-code}\nfunction cobb_douglas(quantities; weights)\n    return prod(quantities .^ weights)\nend\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\ncobb_douglas (generic function with 1 method)\n```\n:::\n:::\n\n\n\n\n\n実装した`cobb_douglas`関数に，消費量`quantities`と弾力性パラメータ`weights`を 渡すことで，以下のように，効用を計算することができます．\n\n\n\n::: {#4 .cell execution_count=1}\n``` {.julia .cell-code}\ncobb_douglas(\n  [2, 3, 5], \n  weights=[0.3, 0.4, 0.3]\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n3.0963389922845703\n```\n:::\n:::\n\n\n\n\n\n## 効用最大化問題の解析的な解\n\n一般的に，効用最大化問題は，価格と所得が与えられたときに， 効用を最大化するような消費量を求める問題として定式化されます．\n\nこうした消費量（需要量）は，マーシャルの需要関数として知られています． コブ・ダグラス型効用関数の場合，マーシャルの需要関数は以下のように導出されます\\[\\^1\\]． ここで，$p_i$は生産要素$i$の価格，$Y$は所得です．\n\n具体的な解法は割愛しますが，以下の条件から導出できます．\n\n1.  効用最大化条件: $MRS_{ij}=\\frac{\\partial U/\\partial x}{\\partial U/\\partial y}=\\frac{p_x}{p_y}$\n2.  予算制約式: $\\sum_{i=1}^{n} p_i x_i = Y$\n\n$$\nx_i = \\frac{1}{p_i}\\frac{w_i}{\\sum_{j=1}^{n} w_j}Y\n$$\n\n\n\n::: {#6 .cell execution_count=1}\n``` {.julia .cell-code}\nfunction demand_marshallian_cobb_douglas_analytical(prices, income; weights)\n    return income .* weights ./ sum(weights) ./ prices\nend\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\ndemand_marshallian_cobb_douglas_analytical (generic function with 1 method)\n```\n:::\n:::\n\n\n\n\n\n実装した`demand_marshallian_cobb_douglas_analytical`関数に，価格`prices`と 所得`income`，弾力性パラメータ`weights`を渡すことで，以下のように，需要量を 計算することができます．\n\n\n\n::: {#8 .cell execution_count=1}\n``` {.julia .cell-code}\nquantities_analytical = demand_marshallian_cobb_douglas_analytical(\n  [1, 2, 3], \n  100, \n  weights=[0.3, 0.4, 0.3]\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n3-element Vector{Float64}:\n 30.0\n 20.0\n 10.0\n```\n:::\n:::\n\n\n\n\n\n## 効用最大化問題の数値的な解\n\n次に，Julia JuMPを用いて，効用最大化問題を数値的に解いてみます．\n事前に，JuMPパッケージとIpoptパッケージをインストールしておきましょう．\nIpoptは，非線形最適化問題を解くためのソルバーを提供しています．\n\n\n\n::: {#10 .cell execution_count=0}\n``` {.julia .cell-code}\nimport Pkg\nPkg.add(\"JuMP\")\nPkg.add(\"Ipopt\")\n```\n:::\n\n\n\n\n\nすでに定義した`cobb_douglas`関数を用いて，以下のように，JuMPを用いて\n効用最大化問題を定式化し，数値的に解くことができます．\n\n\n\n::: {#12 .cell execution_count=1}\n``` {.julia .cell-code}\nusing JuMP\nusing Ipopt\n\nfunction demand_marshallian_cobb_douglas_numerical(prices, income; weights)\n    n = length(prices)\n    model = Model(Ipopt.Optimizer) \n    @variable(model, quantities[1:n] >= 0) # 消費量を変数として定義\n    @objective(model, Max, cobb_douglas(quantities; weights)) # 効用最大化\n    @constraint(model, sum(prices .* quantities) <= income) # 予算制約式\n    optimize!(model)\n    return value.(quantities)\nend\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\ndemand_marshallian_cobb_douglas_numerical (generic function with 1 method)\n```\n:::\n:::\n\n\n\n\n\n効用最大化問題の定式化では，以下のことを行っています．\n\n1.  `@variable`マクロを用いて，消費量`quantities`を変数として定義\n2.  `@objective`マクロを用いて，効用を最大化するような目的関数を定義\n3.  `@constraint`マクロを用いて，予算制約式を定義\n\nそれでは，実装した`demand_marshallian_cobb_douglas_numerical`関数を用いて，\n数値的な解を求めてみましょう．\n\n\n\n::: {#14 .cell messages='false' execution_count=1}\n``` {.julia .cell-code}\nquantities_numerical = demand_marshallian_cobb_douglas_numerical(\n  [1, 2, 3], \n  100, \n  weights=[0.3, 0.4, 0.3]\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThis is Ipopt version 3.14.17, running with linear solver MUMPS 5.7.3.\n\nNumber of nonzeros in equality constraint Jacobian...:        0\nNumber of nonzeros in inequality constraint Jacobian.:        3\nNumber of nonzeros in Lagrangian Hessian.............:        6\n\nTotal number of variables............................:        3\n                     variables with only lower bounds:        3\n                variables with lower and upper bounds:        0\n                     variables with only upper bounds:        0\nTotal number of equality constraints.................:        0\nTotal number of inequality constraints...............:        1\n        inequality constraints with only lower bounds:        0\n   inequality constraints with lower and upper bounds:        0\n        inequality constraints with only upper bounds:        1\n\niter    objective    inf_pr   inf_du lg(mu)  ||d||  lg(rg) alpha_du alpha_pr  ls\n   0  9.9999900e-03 0.00e+00 7.00e-01  -1.0 0.00e+00    -  0.00e+00 0.00e+00   0\n   1  1.1323788e-01 0.00e+00 3.94e-01  -1.0 6.19e-01    -  7.24e-01 1.00e+00f  1\n   2  3.0332663e+00 0.00e+00 3.26e-01  -1.0 1.73e+01    -  8.41e-02 1.00e+00f  1\n   3  1.1420971e+01 0.00e+00 1.26e-01  -1.0 4.77e+01    -  3.20e-01 1.00e+00f  1\n   4  1.6777675e+01 0.00e+00 3.78e-02  -1.0 2.62e+01    -  1.00e+00 1.00e+00f  1\n   5  1.8315460e+01 0.00e+00 5.77e-03  -1.0 7.91e+00    -  1.00e+00 1.00e+00f  1\n   6  1.8343161e+01 0.00e+00 6.89e-05  -2.5 6.32e-01    -  9.99e-01 1.00e+00f  1\n   7  1.8346144e+01 0.00e+00 7.49e-08  -3.8 2.34e-02    -  1.00e+00 1.00e+00f  1\n   8  1.8346293e+01 0.00e+00 3.38e-11  -5.7 8.15e-04    -  1.00e+00 1.00e+00f  1\n   9  1.8346295e+01 0.00e+00 2.75e-14  -8.6 1.01e-05    -  1.00e+00 1.00e+00f  1\n\nNumber of Iterations....: 9\n\n                                   (scaled)                 (unscaled)\nObjective...............:  -1.8346295273804525e+01    1.8346295273804525e+01\nDual infeasibility......:   2.7535867802551789e-14    2.7535867802551789e-14\nConstraint violation....:   0.0000000000000000e+00    0.0000000000000000e+00\nVariable bound violation:   0.0000000000000000e+00    0.0000000000000000e+00\nComplementarity.........:   2.5064583666568809e-09    2.5064583666568809e-09\nOverall NLP error.......:   2.5064583666568809e-09    2.5064583666568809e-09\n\n\nNumber of objective function evaluations             = 10\nNumber of objective gradient evaluations             = 10\nNumber of equality constraint evaluations            = 0\nNumber of inequality constraint evaluations          = 10\nNumber of equality constraint Jacobian evaluations   = 0\nNumber of inequality constraint Jacobian evaluations = 1\nNumber of Lagrangian Hessian evaluations             = 9\nTotal seconds in IPOPT                               = 0.002\n\nEXIT: Optimal Solution Found.\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n3-element Vector{Float64}:\n 30.000000297265977\n 20.00000019590169\n 10.000000099089569\n```\n:::\n:::\n\n\n\n\n\n上記のように様々な評価結果が表示されますが，最終的な結果は以下のようになり，\n数値的な解が解析的な解とほぼ一致していることがわかります．\n\n\n\n::: {#16 .cell execution_count=1}\n``` {.julia .cell-code}\nquantities_numerical\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n3-element Vector{Float64}:\n 30.000000297265977\n 20.00000019590169\n 10.000000099089569\n```\n:::\n:::\n\n\n\n::: {#18 .cell execution_count=1}\n``` {.julia .cell-code}\nquantities_analytical\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n3-element Vector{Float64}:\n 30.0\n 20.0\n 10.0\n```\n:::\n:::\n\n\n\n\n\n## まとめ\n\nこの記事では，Julia JuMPを用いて，コブ・ダグラス型効用関数を用いた\n効用最大化問題を解いてみました．\n\nJulia JuMPを用いることで，非線形最適化問題を簡単に定式化し，\n数値的に解くことができることを確認しました．\n\nJulia JuMPでは，シンプルな関数であれば，定義済みの関数をそのまま目的変数等として\n扱うことができるため，経済モデルの実装にも有用かもしれません．\n\n",
    "supporting": [
      "solving-utility-maximisation-problems-with-julia-jump_files"
    ],
    "filters": [],
    "includes": {}
  }
}