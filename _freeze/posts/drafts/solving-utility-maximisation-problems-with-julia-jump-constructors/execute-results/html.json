{
  "hash": "bc70c0a09418f975ca15b053c98f1765",
  "result": {
    "engine": "julia",
    "markdown": "---\ntitle: \"Julia JuMPで効用最大化問題を解いてみた（コンストラクタを使って）\"\nengine: julia\nlang: ja\ncategories: [JuMP, Julia, Japanese]\n# date: \"2025-02-17\"\ndraft: true\n---\n\n\n\n[過去の記事](https://uchidamizuki.quarto.pub/blog/posts/2025/02/solving-utility-maximisation-problems-with-julia-jump.html)で，Juliaの数理最適化ライブラリのJuMPを使って効用最大化問題を解く方法を紹介しました．\n\n過去の記事では，簡単な事例紹介としてコブ・ダグラス型効用関数を使った効用最大化問題を解く方法を紹介しましたが， 経済モデルでは，コブ・ダグラス型効用関数以外にも，CES型効用関数などの様々な効用関数が使われます． しかし，過去の記事で用いた実装方法では，効用関数を変更するたびに最適化問題の実装を変更する必要がありました．\n\nそこで，この記事では，Juliaのコンストラクタを使って， 同一のコードで異なる効用関数に対する効用最大化問題を解く方法を紹介します．\n\n## コブ・ダグラス型効用関数の実装\n\n効用関数は，消費量ベクトルを引数として受け取り，効用（スカラー値）を返す関数と捉えることができます． 一方で，効用関数を設定する際には，消費量ベクトル以外に弾力性パラメータ等のパラメータを事前に設定する必要があります．\n\nパラメータは効用関数によって異なるため，効用関数を抽象型`AbstractEconomicUtility`として定義し，そのサブタイプとしてコブ・ダグラス型効用関数`CobbDouglasUtility`の型を定義します． `CobbDouglasUtility`は，弾力性パラメータ`weights`を持つ型として定義します．\n\n\n\n::: {#2 .cell execution_count=1}\n``` {.julia .cell-code}\nabstract type AbstractEconomicUtility end\n\nstruct CobbDouglasUtility <: AbstractEconomicUtility\n    weights::Vector{Float64}\nend\n```\n:::\n\n\n\n\n\n次に，function-like objectsを定義することで，効用関数の型`f`に対して`f(quantities)`と呼ぶことで効用を計算できるようにします． 効用関数のパラメータは，型`f`から取得することができるため，関数の引数が`quantities`のみとなっていることに注意してください． これにより，様々な効用関数の型`f`に対して`f(quantities)`のような同一のコードを呼び出すことができるようになります．\n\n\n\n::: {#4 .cell execution_count=1}\n``` {.julia .cell-code}\nfunction(f::CobbDouglasUtility)(quantities)\n    return prod(quantities .^ f.weights)\nend\n```\n:::\n\n\n\n\n\n以上により，コブ・ダグラス型効用関数を定義することができます．\n\n\n\n::: {#6 .cell execution_count=1}\n``` {.julia .cell-code}\n# 効用関数の定義\ncobb_douglas = CobbDouglasUtility([0.3, 0.4, 0.3])\n\n# 効用の算出\ncobb_douglas([2., 3., 5.])\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n3.0963389922845703\n```\n:::\n:::\n\n\n\n\n\nさらに，[過去の記事](https://uchidamizuki.quarto.pub/blog/posts/2025/02/solving-utility-maximisation-problems-with-julia-jump.html)と同様にマーシャルの需要関数を定義します．\n\n\n\n::: {#8 .cell execution_count=1}\n``` {.julia .cell-code}\nfunction demand_marshallian(\n  f::CobbDouglasUtility;\n  prices,\n  income\n)\n  return income * f.weights / sum(f.weights) ./ prices\nend\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\ndemand_marshallian (generic function with 1 method)\n```\n:::\n:::\n\n\n\n\n\n`demand_marshallian()`により，コブ・ダグラス型効用関数の効用最大化問題の解析的な解を求めることができます．\n\n\n\n::: {#10 .cell execution_count=1}\n``` {.julia .cell-code}\nquantities_analytical_cobb_douglas = demand_marshallian(\n  cobb_douglas;\n  prices = [1., 2., 3.],\n  income = 100.\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n3-element Vector{Float64}:\n 30.0\n 20.0\n 10.0\n```\n:::\n:::\n\n\n\n\n\n## 効用最大化問題の数値的な解\n\n[過去の記事](https://uchidamizuki.quarto.pub/blog/posts/2025/02/solving-utility-maximisation-problems-with-julia-jump.html)のコードを少し変更することで，効用最大化問題を数値的に解くことができます．\n\n過去の記事では，コブ・ダグラス型効用関数専用のコードを定義していましたが， 以下の関数`demand_marshallian_numerical`は，抽象型`AbstractEconomicUtility`を引数に取ることで， 様々な効用関数に対して同一のコードを使うことができます．\n\n\n\n::: {#12 .cell execution_count=0}\n``` {.julia .cell-code}\nimport Pkg\nPkg.add(\"JuMP\")\nPkg.add(\"Ipopt\")\n```\n:::\n\n\n\n::: {#14 .cell execution_count=1}\n``` {.julia .cell-code}\nusing JuMP\nusing Ipopt\n\nfunction demand_marshallian_numerical(\n  f::AbstractEconomicUtility;\n  prices::Vector{Float64},\n  income::Float64\n)\n    n = length(prices)\n    model = Model(Ipopt.Optimizer) \n    set_silent(model)\n    @variable(model, quantities[1:n] >= 0)\n    @objective(model, Max, f(quantities))\n    @constraint(model, sum(prices .* quantities) <= income)\n    optimize!(model)\n    return value.(quantities)\nend\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\ndemand_marshallian_numerical (generic function with 1 method)\n```\n:::\n:::\n\n\n\n\n\n上で定義した`cobb_douglas`に対して`demand_marshallian_numerical()`を適用することで， 過去の記事と同様に，コブ・ダグラス型効用関数の効用最大化問題の解析的な解と数値的な解がおおよそ一致することを確認できます．\n\n\n\n::: {#16 .cell execution_count=1}\n``` {.julia .cell-code}\nquantities_numerical_cobb_douglas = demand_marshallian_numerical(\n  cobb_douglas;\n  prices = [1., 2., 3.],\n  income = 100.\n)\n\nquantities_numerical_cobb_douglas\nquantities_analytical_cobb_douglas\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n3-element Vector{Float64}:\n 30.0\n 20.0\n 10.0\n```\n:::\n:::\n\n\n\n\n\n## CES型効用関数の実装\n\nコンストラクタを使うメリットを実感するために， コブ・ダグラス型効用関数以外の効用関数を実装してみます．\n\n以下では，CES型効用関数を実装してみましょう． CES型効用関数は，コブ・ダグラス型効用関数の一般化であり，代替性の程度を表すパラメータ`substitution`を持ちます． コブ・ダグラス型効用関数と同様に，CES型効用関数は，以下のように定義することができます．\n\nマーシャルの需要関数の導出は割愛しますが引数の型`f::CESUtility`を指定することで， 効用関数に応じて`demand_marshallian()`の結果を変化させることができます． このような仕組みは多重ディスパッチと呼ばれています．\n\n\n\n::: {#18 .cell execution_count=1}\n``` {.julia .cell-code}\nstruct CESUtility <: AbstractEconomicUtility\n    substitution::Float64\n    weights::Vector{Float64}\nend\n\nfunction(f::CESUtility)(quantities)\n    return sum(f.weights .* quantities .^ f.substitution) ^ (1 / f.substitution)\nend\n\nfunction demand_marshallian(\n  f::CESUtility;\n  prices,\n  income\n)\n  return f.weights .^ (1 / (1 - f.substitution)) .* prices .^ (1 / (f.substitution - 1)) *\n    income / sum(f.weights .^ (1 / (1 - f.substitution)) .* prices .^ (f.substitution / (f.substitution - 1)))\nend\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\ndemand_marshallian (generic function with 2 methods)\n```\n:::\n:::\n\n\n\n::: {#20 .cell execution_count=1}\n``` {.julia .cell-code}\nces = CESUtility(0.5, [0.3, 0.4, 0.3])\nces([2., 3., 5.])\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n3.196603520188051\n```\n:::\n:::\n\n\n\n\n\n上で定義した`ces`に対して`demand_marshallian()`を適用することで， CES型効用関数の効用最大化問題の解析的な解と数値的な解を求めることができます．\n\n\n\n::: {#22 .cell execution_count=1}\n``` {.julia .cell-code}\nquantities_analytical_ces = demand_marshallian(\n  ces;\n  prices = [1., 2., 3.],\n  income = 100.\n)\n\nquantities_numerical_ces = demand_marshallian_numerical(\n  ces;\n  prices = [1., 2., 3.],\n  income = 100.\n)\n\nquantities_numerical_ces\nquantities_analytical_ces\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n3-element Vector{Float64}:\n 45.0\n 20.000000000000004\n  4.999999999999999\n```\n:::\n:::\n\n\n\n\n\n## まとめ\n\nこの記事では，[過去の記事](https://uchidamizuki.quarto.pub/blog/posts/2025/02/solving-utility-maximisation-problems-with-julia-jump.html)で紹介した効用最大化問題をJuliaのコンストラクタを用いて拡張することで，様々な効用関数に対して同一のコードを使うことができることを示しました．\n\nこのような仕組みを活用することで効用関数を実装した際に， 自動的に最適化問題の解析的な解と数値的な解の整合性を確認することができ， 効用関数に対するテストを実装するのが容易になることが期待されます[^1]．\n\n[^1]: ただし，別で検討したレオンチェフ型効用関数ではうまく数値的な解を求めることができませんでした．特殊な効用関数では，数値的な解を求めることが難しい可能性があるため，別途，テストを実装する必要があるかもしれません．\n\n",
    "supporting": [
      "solving-utility-maximisation-problems-with-julia-jump-constructors_files"
    ],
    "filters": [],
    "includes": {}
  }
}