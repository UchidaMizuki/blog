---
title: "カウントデータの割算値から観測ノイズを除去する"
lang: ja
categories: [Japanese]
draft: true
format:
  html:
    df-print: paged
---

1時間あたりの来店客数・1日あたりの感染者数・1年あたりの出生数など世の中には様々なカウントデータが存在していますが， こうしたカウントデータを分析する際の典型的なニーズは，次の1時間・1日・1年での来店客数・感染者数・出生数を推定することでしょう．

代表的なアプローチとして，状態空間モデルなどの時系列データ・パネルデータを用いた手法が考えられます． 一方で，必ずしも十分な時点数のデータが得られるとは限らないため，そうした場合にはクロスセクションデータのみを用いて推定を行う必要があります．

カウントデータのクロスセクション分析では，異なる店舗・地域などの観測個体を比較するために以下のような割合データが用いられることが多いと思われます．

-   $来店率 = 来店客数 \div 店舗前通行量$
-   $罹患率 = 患者数 \div 人口$
-   $出生率 = 出生数 \div 人口$

こうした割合データを用いることで，分母の大きさの違いを気にせずに観測個体間比較を行えるというメリットがある一方で， カウントデータには観測ノイズが含まれており，期待値が小さい場合に観測ノイズが大きな影響を及ぼすという問題があります．

たとえば，罹患率3%・人口100人の地域における患者数の期待値は3人ですが， 実際の患者数が1人以下となる可能性もそれなりにあるでしょう． 一方で，人口が1000人の地域の患者数の期待値は30人となりますが， 実際の患者数が10人以下となる可能性は低いと考えられます．

患者数が二項分布に従う場合，これらの確率は以下のように確かめることができます．

```{r}
# 100人の地域における患者数が1人以下となる確率
pbinom(1, 100, 0.03)

# 1000人の地域における患者数が10人以下となる確率
pbinom(10, 1000, 0.03)
```

期待値が小さいほど割合データのばらつきが大きくなることは数学的にも確認することができます． 二項分布は，試行回数を$n$・確率を$p$とした場合，分散は$np(1-p)$であることが知られています． さらに，割合データは二項分布の観測値を試行回数で割ったものであるためその分散は以下のようになります． この式より，試行回数

$$
\frac{np(1-p)}{n^2} = \frac{p(1-p)}{n}
$$

```{r}
#| message: false
#| warning: false

library(tidyverse)

set.seed(1234)
n <- 1e3

alpha <- 8

data <- tibble(x = rnorm(n),
               mu = exp(-4 + 2 * x),
               lambda = rgamma(n, alpha, alpha / mu),
               y = rpois(n, lambda))

```

```{r}

model <- MASS::glm.nb(y ~ x,
                      data = data)
summary(model)

data_smoothed <- data |> 
  mutate(mu_pred = predict(model, type = "response"),
         lambda_smoothed = mu_pred / (mu_pred + model$theta) * (y + model$theta))

```

```{r}

data_smoothed |> 
  select(lambda, y, lambda_smoothed) |> 
  pivot_longer(c(y, lambda_smoothed),
               names_to = "pred_type",
               names_transform = list(pred_type = as_factor),
               values_to = "lambda_pred") |> 
  ggplot(aes(lambda, lambda_pred)) +
  geom_point() +
  geom_abline(color = "red") +
  scale_x_continuous(trans = "log1p") +
  scale_y_continuous(trans = "log1p") +
  facet_wrap(~ pred_type)

# data |> 
#   ggplot(aes(y, lambda)) + 
#   geom_point()
# 
# data |> 
#   ggplot(aes(lambda_pred, lambda)) +
#   geom_point()
```
