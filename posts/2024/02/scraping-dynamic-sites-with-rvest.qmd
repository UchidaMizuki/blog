---
title: "rvestで動的サイトをスクレイピングする（Seleniumを使わずに）"
lang: ja
categories: [rvest, R, Japanese]
date: "2024-02-14"
format:
  html:
    df-print: paged
image: scraping-dynamic-sites-with-rvest/html-view.png
---

## RにおけるWebスクレイピングの課題

Webサイトには，コンテンツが変化しない静的サイトとユーザの行動によってコンテンツが変化する動的サイトがありますが，これまでRでは静的サイトと動的サイトのそれぞれのスクレイピングでパッケージを使い分けることが一般的でした．

静的サイトのスクレイピングではrvestパッケージを用いるのが定番となっていますが，これまでrvestでは検索やログインなどが必要な動的サイトを扱うことができませんでした．

動的サイトのスクレイピングでは，rvestに加えてRSeleniumやchromoteなどの他のパッケージを組み合わせる必要がありました．特に，これまでRSeleniumが用いられることが多かったと思われますが，Seleniumは事前にドライバをインストールする必要があるなど環境構築が面倒であるという課題がありました．

## rvest 1.0.4で追加された`read_html_live()`

rvest 1.0.4では動的サイトのスクレイピングを可能とする`read_html_live()`が追加されました． `read_html_live()`は，chromoteパッケージを用いることで，rvestで動的サイトのスクレイピングを可能とするものです[^1]．

[^1]: https://joshuamccrain.com/tutorials/web_scraping_R_selenium.html

`read_html_live()`を用いることで，`$click()`や`$type()`などのメソッドを用いた動的サイトの操作が可能となるだけでなく，`html_elements()`や`html_attr()`などの一般的なrvestの関数をシームレスに呼ぶことができるようになります．

## `read_html_live()`の使い方

ここでは，[こちらのRSeleniumのチュートリアル](https://joshuamccrain.com/tutorials/web_scraping_R_selenium.html)で紹介されているものと同じ処理を`read_html_live()`で行ってみましょう．

こちらのチュートリアルでは，アメリカの郵便番号（ZIP code）から地元テレビ局の情報をスクレイピングしています．

RSeleniumでのサイトのアクセスは，`read_html_live()`を使って以下のように書き換えられます．

``` r
# RSelenium
# Source: https://joshuamccrain.com/tutorials/web_scraping_R_selenium.html
library(RSelenium)

rD <- rsDriver(browser="firefox", port=4545L, verbose=F)
remDr <- rD[["client"]]
remDr$navigate("https://www.fcc.gov/media/engineering/dtvmaps")
```

⏬

```{r}
#| message: false
#| warning: false

# rvest
library(rvest)
library(tidyverse)

html <- read_html_live("https://www.fcc.gov/media/engineering/dtvmaps")
```

読み込まれたオブジェクトは，`$view()`でブラウザで確認することができます．
Ctrl+Shift+Cでサイト上のエレメントを選択したのち，該当箇所を右クリック⏩Copy⏩Copy selectorでCSSセレクタをコピーすれば，`$type()`や`$click()`の引数として使うことができます．

``` r
# rvest
html$view()
```

![](scraping-dynamic-sites-with-rvest/html-view.png)

次に，中央のフォームに郵便番号（ZIP code）を入力しGo!ボタンをクリックするコードは以下のように書き換えられます．

``` r
# RSelenium
# Source: https://joshuamccrain.com/tutorials/web_scraping_R_selenium.html
zip <- "30308"
remDr$findElement(using = "id", value = "startpoint")$sendKeysToElement(list(zip))
remDr$findElements("id", "btnSub")[[1]]$clickElement()
```

⏬

```{r}
# rvest
zip <- "30308"
html$type("#startpoint", zip)
html$click("#btnSub")
```

最後に，[こちらのRSeleniumのチュートリアル](https://joshuamccrain.com/tutorials/web_scraping_R_selenium.html)と同じデータが取得できたことを確認しましょう．

```{r}
html |> 
  html_elements("table.tbl_mapReception") |> 
  chuck(3) |> 
  html_table() |> 
  select(!c(1, IA)) |> 
  rename_with(str_to_lower) |> 
  rename(ch_num = `ch#`) |> 
  slice_tail(n = -1) |> 
  filter(callsign != "")
```

## まとめ

以上のようにrvest 1.0.4で追加された`read_html_live()`を使うことで，rvestだけでシームレスに静的サイトと動的サイトのスクレイピングが可能となるだけでなく，RSeleniumと比べて簡単なコードでブラウザ上の操作を再現することができることがわかりました．