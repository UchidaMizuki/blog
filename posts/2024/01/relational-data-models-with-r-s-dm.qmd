---
title: "Rのdmパッケージでデータ前処理の質を高めよう"
lang: ja
categories: [dm, R, Japanese]
date: "2024-01-28"
format:
  html:
    mermaid:
      theme: default
    df-print: paged
image: relational-data-models-with-r-s-dm/mermaid-figure-2.png
---

## データ前処理の作業ミスをなくすために

データ分析に要する時間のうち，8割は前処理に費やされているといわれています．前処理は，その後のデータ分析の質を左右しますから，前処理は非常に重要です．一方で，前処理に膨大な時間を要するということは，作業ミスが起こる確率もそれだけ高くなるということを意味しています．

一般的な（データ構造に対する）前処理には，データフレームの”抽出”・”集約”・”結合”がありますが，なかでも”結合”は，コードが長くなりやすく，作業ミスが起こりやすい作業であると思われます．また，分析で必要となるデータフレームが1つにまとまっていることは稀ですから，データフレームの結合は特に頻出する処理でもあります．

データフレームの”結合”で起こりがちな典型的なミスとして，以下のようなものがあります[^1]．

[^1]: 幸いなことに，最近のdplyrでは，結合先のデータの”ダブり”に対して警告が出るようになりました．

-   結合するデータフレームがMECE（「漏れなく・ダブりなく」）の状態でない
-   結合のためのキーを取り違える，または，データ形式が異なる

もしも，これまでデータフレームの結合において，何らかの作業ミスや”ヒヤリ・ハット”を経験したことがあるのであれば，それらを放置せず何らかのパッケージに頼るほうが得策かもしれません．また，仮に作業ミスがなかったとしても，私たちは過去の作業が正しかったかについて疑心暗鬼になりがちです[^2]．

[^2]: その作業を行ったのが過去の自分であっても他の誰かであっても，完全に作業が正しかったという自信は持てないものです．

この記事では，データフレームの”結合”における作業ミスや疑心暗鬼の解決策として有力なRのdmパッケージを紹介します．

## dmによるリレーショナルデータモデル

dmの提供するリレーショナルデータモデルは，複数のデータ間の関係性を私たちの代わりに管理してくれます．

そこで，repurrrsiveパッケージで提供されているStarWarsのデータセットを使って，dmの提供するリレーショナルデータモデルを構築してみましょう．あらかじめ，tidyverse，dm，repurrrsiveの3つのパッケージを読み込んでおきます．

```{r}
#| label: setup
#| message: false

library(tidyverse)
library(dm)
library(repurrrsive)

```

repurrrsiveで提供されているStarWarsのデータセットには，以下のようなものが含まれています[^3]．

[^3]: repurrrsiveのエクスポートするデータのうち，名前が`sw_`で始まるデータがStarWarsに関するもので，`sw_`以降の部分がデータの内容を表しています．

```{r}
#| label: data-list-repurrrsive
#| code-fold: true
#| code-summary: repurrrsiveで提供されているStarWarsのデータセット

data(package = "repurrrsive") |> 
  chuck("results") |> 
  as_tibble() |> 
  filter(str_starts(Item, "sw_")) |> 
  pull(Item)

```

この記事では，複数のデータ間の関係を扱う必要のある以下の2つの分析事例を通じて，リレーショナルデータモデルを活用する方法について説明します．

1.  基礎編：dmでリレーショナルデータモデルを構築する
2.  応用編：dmでモデルを拡張したりキーを検証したりする

### 1. 基礎編：dmでリレーショナルデータモデルを構築する

基礎編として，StarWars作品の登場人物の故郷の惑星の構成比を調べるためのリレーショナルデータモデルを構築してみしょう．この分析を行うために，以下のように3つのデータフレーム`films`・`people`・`planets`を準備しておきます[^4]．ここでは，分析をシンプルにするため，必要なデータのみを`select`しました[^5]．

[^4]: repurrrsiveのデータはリスト形式で提供されているため，[こちらの記事](https://tidyr.tidyverse.org/articles/rectangle.html)を参考にデータフレームに変換しました．

[^5]: ここでは，sw_peopleのspecies列は不要ですが，次の分析で使用するため選択しておきます．

```{r}
#| label: data-starwars-1

films <- tibble(film = sw_films) |> 
  unnest_wider(film) |> 
  select(url, title, characters)
people <- tibble(person = sw_people) |>
  unnest_wider(person) |> 
  select(url, name, homeworld, species)
planets <- tibble(planet = sw_planets) |>
  unnest_wider(planet) |> 
  select(url, name)

```

```{r}
#| label: print-data-starwars-1

films
people
planets

```

準備したデータフレームを確認すると，各データフレームの`url`列がキーとして用いられていることがわかりますので，データフレーム間の関係は以下のようにまとめることができます[^6]．特に，1つの映画作品には複数の登場人物が登場することが一般的ですので，`films`の`characters`列が登場人物のリストになっていることに注意が必要です．そのため，このままでは，`films`の`characters`列を`people`の`url`列と対応付けることができません．

[^6]: ここでは，データフレーム間の関係を図示するために，mermaidを使用しました．

```{mermaid}
flowchart TB
  films.characters --> people.url
  people.homeworld --> planets.url
  subgraph films
    films.url[url]
    films.title[title]
    films.characters[List of characters] 
  end
  subgraph people
    people.url[url]
    people.name[name]
    people.homeworld[homeworld]
  end
  subgraph planets
    planets.url[url]
    planets.name[name]
  end
```

そこで，`films`と`people`の関係，すなわち，どの作品にどの登場人物が登場するかを表すデータ`films_x_characters`を新たに作成することを考えます[^7]．`films_x_characters`を介すことで，データ間の関係を以下のようにまとめることができます．

[^7]: 作品と登場人物には，明確な上下関係はありませんので，`characters_x_films`という名称でも構いません．

```{mermaid}
flowchart TB
  films_x_characters.url --> films.url
  films_x_characters.characters ---> people.url
  people.homeworld --> planets.url
  subgraph films_x_characters
    films_x_characters.url[url]
    films_x_characters.characters[characters]
  end
  subgraph films
    films.url[url]
    films.title[title]
  end
  subgraph people
    people.url[url]
    people.name[name]
    people.homeworld[homeworld]
  end
  subgraph planets
    planets.url[url]
    planets.name[name]
  end
```

それでは，上のイメージに従って，実際にリレーショナルデータモデルを構築してみましょう．まず，`films`の`url`・`characters`列を使って`films_x_characters`を作成します．ついでに`films`から不要となった`characters`列を削除しておきます．

```{r}
#| label: films_x_characters-starwars-1

# Create films_x_characters and remove characters column from films
films_x_characters <- films |> 
  select(url, characters) |> 
  unnest_longer(characters)
films <- films |> 
  select(!characters)

films_x_characters

```

最後に，`dm()`に準備した`films`・`people`・`planets`・`films_x_characters`を渡した後，主キー（primary keys）と外部キー（foreign keys）を追加することで，リレーショナルデータモデルを構築することができます．

dmでは，主キーを`dm_add_pk()`で[^8]，外部キーを`dm_add_fk()`で設定します[^9]．

[^8]: `films`・`people`・`planets`については，`url`列が主キーとなり，`films_x_characters`については，`url`・`characters`列の2列の組合せが主キーとなります．

[^9]: 上のイメージの矢印に従って，`films_x_characters`の`url`・`characters`列を，それぞれ`films`・`people`の`url`列に対応付けます．さらに，`people`の`homeworld`列を`planets`の`url`列に対応付けます．

```{r}
#| label: dm-starwars-1

dm_starwars_1 <- dm(films, people, planets, films_x_characters) |> 
  
  # 1. Add primary keys
  dm_add_pk(films, url) |>
  dm_add_pk(people, url) |>
  dm_add_pk(planets, url) |>
  dm_add_pk(films_x_characters, c(url, characters)) |>
  
  # 2. Add foreign keys
  dm_add_fk(films_x_characters, url, films) |> 
  dm_add_fk(films_x_characters, characters, people) |>
  dm_add_fk(people, homeworld, planets) 

dm_starwars_1

```

`dm_draw()`を用いて，リレーショナルデータモデルを描画することもできます．描画してみると，上のイメージと同様の関係が構築されていることがわかります．

```{r}
#| label: dm_draw-starwars-1

dm_draw(dm_starwars_1)

```

以下のように`dm_flatten_to_tbl()`を用いることで，`films_x_characters`データに`films`・`people`・`planets`データを結合したデータフレームを作成することができます[^10]．この際，異なるデータ間で同名の列名が存在する場合には，データ名に応じて自動的に列名が変更されます．このように，リレーショナルデータモデルが私たちの代わりにデータ間の関係を管理してくれるおかげで，他のデータ間との関係に基づいて自動的にデータフレームを結合することができます．

[^10]: dmでは，各データを”テーブル”と呼びます．

```{r}
#| label: dm_flatten_to_tbl-starwars-1

data_films_x_characters_1 <- dm_starwars_1 |> 
  dm_flatten_to_tbl(films_x_characters,
                    .recursive = TRUE) 

data_films_x_characters_1

```

作成した`data_films_x_characters_1`を使うことで，以下のように，登場人物の故郷の惑星の構成比をグラフにすることができます． このグラフへの考察はひとまず措くとして，リレーショナルデータモデルを用いることでデータフレームの結合を自動化できることが確認できました．

しかし，上のような分析であれば，`left_join()`を用いてデータフレームを結合することも簡単で， あまりリレーショナルデータモデルを用いるメリットが感じられないかもしれません． そこで応用編では，リレーショナルデータモデルが本領を発揮する，より込み入った状況を考えてみます．

```{r}
#| label: plot-starwars-1
#| code-fold: true
#| code-summary: 登場人物の故郷の惑星の構成比のグラフ

data_films_x_characters_1 |> 
  mutate(name.planets = fct_lump_n(name.planets, 7,
                                   ties.method = "first") |> 
           fct_relevel("Other", 
                       after = Inf)) |> 
  count(title, name.planets) |> 
  mutate(prop = n / sum(n),
         .by = title,
         .keep = "unused") |> 
  ggplot(aes(fct_rev(title), prop,
             fill = name.planets)) +
  geom_col(position = position_stack(reverse = TRUE)) +
  geom_text(aes(label = if_else(prop < 5e-2, 
                                "",
                                scales::label_percent(accuracy = 1)(prop))),
            position = position_stack(vjust = 0.5,
                                      reverse = TRUE)) +
  scale_x_discrete("作品タイトル") +
  scale_y_continuous("登場人物の故郷の惑星の構成比",
                     labels = scales::percent) +
  scale_fill_brewer("惑星名",
                    palette = "Set2") +
  coord_flip() +
  theme(legend.position = "bottom") +
  guides(fill = guide_legend(nrow = 2,
                             byrow = TRUE))

```

### 2. 応用編：dmでモデルを拡張したりキーを検証したりする

応用編では，StarWars作品の登場人物の種族の構成比を調べてみます． この分析の難易度は基礎編とさほど変わりませんが，通常，扱うデータが増えるとコードが煩雑化しやすいため，リレーショナルデータモデルを使うメリットが大きくなります． さらに，リレーショナルデータモデルのメリットには，以下のようなものもあります．

-   既存のリレーショナルデータモデルに新たなデータを追加することが可能
-   結合のためのキーの整合性を確認することが可能

あらかじめ，この分析で必要となる`species`データを準備しておきます．

```{r}
#| label: data-starwars-2

species <- tibble(species = sw_species) |> 
  unnest_wider(species) |> 
  select(url, name)

species

```

dmでは，`dm()`を用いて，リレーショナルデータモデルに新たにデータを追加することができます． ここでは，`dm_starwars_1`に`species`データを追加して，`dm_starwars_2`を作成してみましょう． `dm_draw()`を用いることで，モデルが更新されたことがわかります．

```{r}
#| label: dm-starwars-2

dm_starwars_2 <- dm_starwars_1 |> 
  dm(species) |> 
  dm_add_pk(species, url) |> 
  dm_add_fk(people, species, species)

dm_draw(dm_starwars_2)

```

次に，結合のためのキーの整合性を確認してみましょう．こうした検証は，`dm_examine_constraints()`を用いることで可能です． ここでは，上でありがちなミスとして挙げた，2種類のミスを含んだモデルを作成して，`dm_examine_constraints()`の挙動を確認してみましょう． ここで，`dm_starwars_2_wrong_data`は，`species`データの1行目が削除されたデータで，データがMECE（「漏れなく・ダブりなく」）でないものです． また，`dm_starwars_2_wrong_pk`は，`species`データの主キーを取り違えたものです．

```{r}
#| label: dm-starwars-2-wrong

dm_starwars_2_wrong_data <- dm_starwars_1 |> 
  dm(species = species |> 
       slice(-1)) |> 
  dm_add_pk(species, url) |> 
  dm_add_fk(people, species, species)

dm_starwars_2_wrong_pk <- dm_starwars_1 |> 
  dm(species) |> 
  dm_add_pk(species, name) |> 
  dm_add_fk(people, species, species)

```

`dm_examine_constraints()`の結果を見てみましょう． 正しいモデルである`dm_starwars_2`では，`ℹ All constraints satisfied.`というメッセージが表示され，モデルのキーが整合していることがわかります． 一方で，`dm_starwars_2_wrong_data`と`dm_starwars_2_wrong_pk`では，`! Unsatisfied constraints:`というメッセージが表示されています． これは，`species`データの主キーに含まれるはずのデータが含まれていないことに起因します． このように，`dm_examine_constraints()`を用いることで，簡単にモデルのキーの整合性を確認することができます．

```{r}
#| label: dm_examine_constraints-starwars-2

print(dm_examine_constraints(dm_starwars_2))
print(dm_examine_constraints(dm_starwars_2_wrong_data))
print(dm_examine_constraints(dm_starwars_2_wrong_pk))

```

以上のように，dmでは，`dm()`でリレーショナルデータモデルに新たなデータを追加したり，`dm_examine_constraints()`で結合のためのキーの整合性を確認したりすることができることがわかりました． 最後に，作成したリレーショナルデータモデル`dm_starwars_2`を用いて，StarWars作品の登場人物の種族の構成比をグラフ化したものが以下の図です．ここでも，考察は割愛します．

```{r}
#| label: plot-starwars-2
#| code-fold: true
#| code-summary: 登場人物の故郷の種族の構成比のグラフ
#| message: false

dm_starwars_2 |> 
  dm_flatten_to_tbl(films_x_characters,
                    .recursive = TRUE) |> 
  mutate(name.species = name.species |> 
           fct_na_value_to_level("Other") |> 
           fct_lump_n(7,
                      ties.method = "first") |> 
           fct_relevel("Other", 
                       after = Inf)) |> 
  count(title, name.species) |> 
  mutate(prop = n / sum(n),
         .by = title,
         .keep = "unused") |> 
  ggplot(aes(fct_rev(title), prop,
             fill = name.species)) +
  geom_col(position = position_stack(reverse = TRUE)) +
  geom_text(aes(label = if_else(prop < 5e-2, 
                                "",
                                scales::label_percent(accuracy = 1)(prop))),
            position = position_stack(vjust = 0.5,
                                      reverse = TRUE)) +
  scale_x_discrete("作品タイトル") +
  scale_y_continuous("登場人物の故郷の種族の構成比",
                     labels = scales::percent) +
  scale_fill_brewer("種族名",
                    palette = "Set2") +
  coord_flip() +
  theme(legend.position = "bottom") +
  guides(fill = guide_legend(nrow = 2,
                             byrow = TRUE))

```

## まとめ

この記事では，dmを使ってリレーショナルデータモデルを構築する方法を紹介しました． dmを使って，ひとたびリレーショナルデータモデルを構築してしまえば， データ間の関係を自ら管理する必要がなくなり，`dm_flatten_to_tbl()`でデータの結合を自動的に行うことができます． それ以外にも，dmでは，`dm()`によるモデル拡張や`dm_examine_constraints()`結合のためのキーの整合性の確認など， データ前処理の質を高めるための便利な機能が提供されています．

## 参考文献

-   [dmパッケージのサイト](https://dm.cynkra.com/index.html)
-   [前処理大全［データ分析のためのSQL/R/Python実践テクニック］](https://gihyo.jp/book/2018/978-4-7741-9647-3)
